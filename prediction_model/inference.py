import numpy as np
import pandas as pd
import os

BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


def inference(name, model_type):
    name = name.replace(' ', '-')
    weights = np.load(os.path.join(BASE_DIR, 'data', 'trained_model', 'weights_{0}_{1}.npy'.format(name, model_type)))
    weights = weights.flatten()
    weights = np.delete(weights, (0), axis=0)   # del bias
    df = pd.DataFrame(weights, columns=["weights"])

    df_sorted = df.sort_values(["weights"], ascending=[False])
    #df_sorted.to_csv('./inference/sorted_weights_{0}_{1}.csv'.format(name.replace(' ', '-'), model_type), mode='w')
    '''    
    average_table = pd.read_csv(os.path.join(BASE_DIR, 'data', 'dataset', 'secondary', 'dataset_{}_average_table.csv'.format(name)), dtype='float32')

    dummy = list()  # coefficient generated by random initialization
    for i, average in enumerate(average_table.values.T.tolist()[0]):
        if average == 0:
            dummy.append(i)
    '''
    inference = list()

    for data in df_sorted.iterrows():
        '''
        if data[0] in dummy:
            continue
        '''
        infer = dict()
        infer["id"] = data[0]
        infer["coefficient"] = data[1].values.tolist()[0]
        inference.append(infer)
    
    return inference

def average(name):
    name = name.replace(' ', '-')
    sparse_average_table = pd.read_csv(os.path.join(BASE_DIR, 'data', 'dataset', 'secondary', 'dataset_{}_average_table.csv'.format(name)), dtype='float32')
    
    dense_average_table = list()
    for i, average in enumerate(sparse_average_table.values.T.tolist()[0]):
        if average != 0:
            temp = dict()
            temp["id"] = i
            temp["winrate"] = round(average, 2)
            dense_average_table.append(temp)
    
    return dense_average_table


if __name__ == "__main__":
    inference("laurelwoods", "enemy")